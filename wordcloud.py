# -*- coding: utf-8 -*-
"""wordcloud.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oZi3Q2W_3cH6um0vpITUD68oA1YBXnA-
"""

pip install konlpy #파이썬 형태소 분석 라이브러리

import requests #HTTP 호출하는 라이브러리
import pandas as pd #데이터분석 라이브러리
from bs4 import BeautifulSoup 
import matplotlib.pyplot as plt
import nltk 
from konlpy.tag import Kkma
#from konlpy.tag import Twitter 이거에서 Okt로 변경됨
from konlpy.tag import Okt
from wordcloud import WordCloud, ImageColorGenerator

!apt-get update -qq
!apt-get install fonts-nanum*
!apt-get install fonts-woowa-hanna

import matplotlib.font_manager as fm #한글 폰트 사용

all_fonts_I_can_use = fm.findSystemFonts(fontpaths=None, fontext='ttf') #폰트 불러옴
all_fonts_I_can_use

date='20211130' #데이트 변수 설정

news_url = 'https://news.naver.com/main/ranking/popularDay.nhn?date={}'.format(date) #뉴스 url 설정

headers = {'User-Agent' : 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'}
req = requests.get(news_url, headers = headers) #api 통신

soup = BeautifulSoup(req.text, 'html.parser')
news_titles = soup.select('.rankingnews_box > ul > li > div > a')

crowled_title = []
for i in range(len(news_titles)): #뉴스 타이틀 개수 만큼 반복문을 돌려줌
    crowled_title.append(news_titles[i].text)
    print(i+1, news_titles[i].text) #뉴스 제목을 출력

title = "".join(crowled_title)

filtered_title = title.replace('.', ' ').replace('"',' ').replace(',',' ').replace("'"," ").replace('·', ' ').replace('=',' ').replace('\n',' ') #특정문자를 공백으로 변경해줌

filtered_title

okt = Okt() #한글 형태소 분석

tokens_ko = okt.nouns(filtered_title) #명사만 추출함
tokens_ko

ko = nltk.Text(tokens_ko, name='기사 내 명사') 
ko.tokens
ko.vocab() #명사가 나온 횟수 세는것

new_ko=[]
for word in ko:
  if len(word) > 1 and word != '단독' and  word != ' ': #word변수의 길이가 1보다 길때 word에 단독 단어가 없을때 word에 공백이 없을때
        new_ko.append(word) #new_ko 배열 끝에 word를 추가해준다.

new_ko

ko = nltk.Text(new_ko, name = '기사 내 명사 두 번째')
ko.tokens
ko.vocab()

data = ko.vocab().most_common(150)  #형태소를 괄호안에 수만큼 출력한다.
data = dict(data) #data딕셔너리를 추가한다.

data

wordcloud = WordCloud().generate(filtered_title) #워드클라우드 생성

font = '/usr/share/fonts/truetype/woowa/BM-HANNA.ttf'

wc = WordCloud(font_path=font,\  #워드 클라우드 설정
		background_color="white", \
		width=1000, \
		height=1000, \
		max_words=100, \
		max_font_size=300)

wc = wc.generate_from_frequencies(data) #data를 워드클라우드로 시각화

plt.figure(figsize=(10,10)) #피규어 생성
plt.imshow(wc, interpolation='bilinear')
plt.axis('off')
plt.show()

import numpy as np #수치 연산
from PIL import Image
from google.colab import drive #드라이브 불러옴
import pandas
drive.mount("./mount", force_remount=True) #드라이브 불러옴
alice_mask=np.array(Image.open('mount/My Drive/images/mask3.png'))

plt.figure(figsize=(8,8)) #사진 크기 지정
plt.imshow(alice_mask, cmap=plt.cm.gray, interpolation='bilinear') #사진 설정
plt.axis("off")
plt.show() #사진 보여줌

wc = WordCloud(font_path=font,
		background_color="white", 
		width=1200, 
		height=1000, 
		max_words=100,
    mask=alice_mask,  
		max_font_size=300) #워드 클라우드 생성
wc = wc.generate_from_frequencies(data)

plt.figure(figsize=(10,10))
plt.imshow(wc, interpolation='bilinear') #사진에 워드 클라우드 띄워줌
plt.axis('off')
plt.show()

alice_mask=np.array(Image.open('mount/My Drive/images/mask4.png'))

plt.figure(figsize=(8,8))
plt.imshow(alice_mask, cmap=plt.cm.gray, interpolation='bilinear')
plt.axis("off")
plt.show()

import seaborn as sns #데이터 시각화
sns.color_palette("Set2", as_cmap=True)
#sns.color_palette("flare", as_cmap=True)

wc = WordCloud(font_path=font,
		background_color="white", 
		width=1200, 
		height=1000, 
		max_words=100,
		max_font_size=300,
    mask=alice_mask,
		colormap = sns.color_palette("flare", as_cmap=True)
		)

wc = wc.generate_from_frequencies(data)

plt.figure(figsize=(10,10))
plt.imshow(wc, interpolation='bilinear')
plt.axis('off')
plt.show()

alice_mask=np.array(Image.open('mount/My Drive/images/mask7.png'))

plt.figure(figsize=(12,12))
plt.imshow(alice_mask, cmap=plt.cm.gray, interpolation='bilinear')
plt.axis("off")
plt.show()

wc = WordCloud(font_path=font,
		background_color="white", 
		width=1200, 
		height=1000, 
		max_words=100,
    mask=alice_mask,  
		max_font_size=300)
wc = wc.generate_from_frequencies(data)

image_colors = ImageColorGenerator(alice_mask)

# 이미지에 맞는 글자색으로 칠해지기
wc.recolor(color_func=image_colors)

plt.figure(figsize=(12,12))
plt.imshow(wc, interpolation='bilinear')
plt.axis('off')
plt.show()

wc.to_file("output.png")

alice_mask=np.array(Image.open('mount/My Drive/images/mask6.png'))

plt.figure(figsize=(12,12))
plt.imshow(alice_mask, cmap=plt.cm.gray, interpolation='bilinear')
plt.axis("off")
plt.show()

wc = WordCloud(font_path=font,
		background_color="white", 
		width=1200, 
		height=1000, 
		max_words=100,
    mask=alice_mask,  
		max_font_size=300)
wc = wc.generate_from_frequencies(data)

image_colors = ImageColorGenerator(alice_mask)

# 이미지에 맞는 글자색으로 칠해지기
wc.recolor(color_func=image_colors)

plt.figure(figsize=(12,12))
plt.imshow(wc, interpolation='bilinear')
plt.axis('off')
plt.show()

wc.to_file("output.png")